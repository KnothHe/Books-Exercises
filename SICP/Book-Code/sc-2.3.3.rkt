#lang sicp

;; (define (element-of-set? x set)
;;   (cond ((null? set) false)
;;         ((equal? x (car set)) true)
;;         (else (element-of-set? x (cdr set)))))

;; (define (adjoin-set x set)
;;   (if (element-of-set? x set)
;;       set
;;       (cons x set)))

;; (define (intersection-set set1 set2)
;;   (cond ((or (null? set1) (null? set2)) '())
;;         ((element-of-set? (car set1) set2)
;;          (cons (car set1)
;;                (intersection-set (cdr set1) set2)))
;;         (else (intersection-set (cdr set1) set2))))

;; (define (union-set set1 set2)
;;   (cond ((null? set1) set2)
;;         ((not (element-of-set? (car set1) set2))
;;          (cons (car set1)
;;                (union-set (cdr set1) set2)))
;;         (else (union-set (cdr set1) set2))))

;; (define set1 (list 1 2 3 4))
;; (define set2 (list 3 4 5 6))
;; (display (intersection-set set1 set2))
;; (newline)
;; (display (union-set set1 set2))

;; (define  (element-of-set? x set)
;;   (cond ((null? set) false)
;;         ((= x (car set)) true)
;;         ((< x (car set)) false)
;;         (else (element-of-set? x (cdr set)))))

;; (define (intersection-set set1 set2)
;;   (cond ((or (null? set1) (null? set2)) '())
;;         ((= (car set1) (car set2))
;;          (cons (car set1)
;;                (intersection-set (cdr set1) (cdr set2))))
;;         ((< (car set1) (car set2))
;;          (intersection-set (cdr set1) set2))
;;         ((> (car set1) (car set2))
;;          (intersection-set set1 (cdr set2)))))

;; (define (adjoin-set x set)
;;   (cond ((or (null? set) (< x (car set))) (cons x set))
;;         ((= x (car set)) set)
;;         (else (cons (car set) (adjoin-set x (cdr set))))))

;; (define (intersection-set set1 set2)
;;   (if (or (null? set1) (null? set2))
;;       '()
;;       (let ((x1 (car set1)) (x2 (car set2)))
;;         (cond ((= x1 x2)
;;                (cons x1
;;                      (intersection-set (cdr set1) (cdr set2))))
;;               ((< x1 x2)
;;                (intersection-set (cdr set1) set2))
;;               ((< x2 x1)
;;                (intersection-set set1 (cdr set2)))))))

;; (define (union-set set1 set2)
;;   (cond ((null? set1) set2)
;;         ((null? set2) set1)
;;         (else
;;          (let ((x1 (car set1)) (x2 (car set2)))
;;            (cond ((= x1 x2)
;;                   (cons x1
;;                         (union-set (cdr set1) (cdr set2))))
;;                  ((< x1 x2)
;;                   (cons x1
;;                         (union-set (cdr set1) set2)))
;;                  ((< x2 x1)
;;                   (cons x2
;;                         (union-set set1 (cdr set2)))))))))

;; (define set1 (list 1 2 3 5))
;; (define set2 (list 3 4 5 6))
;; (display (adjoin-set 4 set1))
;; (newline)
;; (display (intersection-set set1 set2))
;; (newline)
;; (display (union-set set1 set2))
;; (newline)

(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (entry set)) true)
        ((< x (entry set))
         (element-of-set? x (left-branch set)))
        ((> x (entry set))
         (element-of-set? x (right-branch set)))))

(define (adjoin-set x set)
  (cond ((null? set) (make-tree x '() '()))
        ((= x (entry set)) set)
        ((< x (entry set))
         (make-tree (entry set)
                    (adjoin-set x (left-branch set))
                    (right-branch set)))
        ((> x (entry set))
         (make-tree (entry set)
                    (left-branch set)
                    (adjoin-set x (right-branch set))))))

(define (tree->list-1 tree)
  (if (null? tree)
      '()
      (append (tree->list-1 (left-branch tree))
              (cons (entry tree)
                    (tree->list-1 (right-branch tree))))))

(define (tree->list-2 tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree '()))

