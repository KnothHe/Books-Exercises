#lang sicp

;; (define (make-rat n d)
;;   (let ((g (gcd n d)))
;;     (cons (/ n g) (/ d g))))
(define (make-rat n d)
  (let ((g (gcd n d)))
    (if (negative? d)
        (cons (/ (- n) g)
              (/ (- d) g))
        (cons (/ n g)
              (/ d g)))))
(define (numer x) (car x))
(define (denom x) (cdr x))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

(define one-half (make-rat 1 2))
(define neg-one-half (make-rat 1 -2))
(define one-half-v2 (make-rat -1 -2))
(define neg-one-half-v2 (make-rat -1 2))
(print-rat one-half)
(print-rat neg-one-half)
(print-rat one-half-v2)
(print-rat neg-one-half-v2)
